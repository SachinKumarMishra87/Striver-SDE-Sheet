--------------------------------------------------------------------------------------------
Question Link -> https://leetcode.com/problems/search-a-2d-matrix/
--------------------------------------------------------------------------------------------
74. Search a 2D Matrix => 
 You are given an m x n integer matrix matrix with the following two properties:

Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.

You must write a solution in O(log(m * n)) time complexity.
--------------------------------------------------------------------------------------------
Example 1:

Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
-------------------
Example 2:

Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
--------------------------------------------------------------------------------------------
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n = matrix.size();
        int m = matrix[0].size();
        
        int low = 0, high = (n*m-1);
        
        while(low <= high)
        {
            int mid = (low + high) / 2;
            
            int row = mid / n;
            int col = mid % m;
            
            if(matrix[row][col] == target)
            {
                return true;
            }
            else if(matrix[row][col] < target){
                low = mid + 1;
            }
            else{
                high = mid - 1;
            }
        }
        return false;
    }
};
--------------------------------------------------------------------------------------------
Treat the matrix as a sorted 1D array:
Since the matrix is row-wise and column-wise sorted, we can think of the entire matrix as one long, flattened sorted array.

The index of an element in this flattened array is:
index = row_index * number_of_columns + column_index

Map 1D index to 2D coordinates:
During binary search, calculate the middle index mid in this flattened array.
Convert this mid index back to the 2D matrix coordinates (row and column).
row = mid / number_of_columns
col = mid % number_of_columns
Compare the value at matrix[row][col] with the target.

Binary Search:
Initialize low = 0 and high = total_elements - 1.
Calculate mid = (low + high) / 2.
If matrix[row][col] == target, return true.
If matrix[row][col] < target, adjust the search range by moving low to mid + 1.
If matrix[row][col] > target, adjust the search range by moving high to mid - 1.

Time Complexity:
Since binary search has a time complexity of 
O(log(n√óm)) where 
n is the number of rows and 
m is the number of columns, this approach is efficient for large matrices.
