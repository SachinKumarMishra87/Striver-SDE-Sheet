--------------------------------------------------------------------------------------------
Question Link -> https://leetcode.com/problems/merge-sorted-array/
--------------------------------------------------------------------------------------------
88. Merge Sorted Array - >
          You are given two integer arrays nums1 and nums2, sorted in non-decreasing order,
          and two integers m and n, representing the number of elements in nums1 and nums2
          respectively.
          
          Merge nums1 and nums2 into a single array sorted in non-decreasing order.
          
          The final sorted array should not be returned by the function, but instead be
          stored inside the array nums1. To accommodate this, nums1 has a length of m + n, 
          where the first m elements denote the elements that should be merged, and the 
          last n elements are set to 0 and should be ignored. nums2 has a length of n.
--------------------------------------------------------------------------------------------
Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.
-----------
Example 2:

Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and [].
The result of the merge is [1].
--------------------------------------------------------------------------------------------
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i = m-1; 
        int j = n-1;
        int k = (m+n)-1;
        
        while(i >= 0 && j >= 0)
        {
            if(nums1[i] >= nums2[j])
            {
                nums1[k--] = nums1[i--];
            }
            else{
                nums1[k--] = nums2[j--];
            }
        }
        while(i >= 0)
        {
           nums1[k--] = nums1[i--];
        }
        while(j >= 0)
        {
           nums1[k--] = nums2[j--];
        }
    }
};
// Time Complexity: 
// ùëÇ(ùëö+ùëõ)
// Space Complexity: 
--------------------------------------------------------------------------------------------
Approach for Solving the Problem:
Understand the Problem:

You have two sorted arrays:

nums1 with size m + n where the first m elements are valid, and the remaining n elements are empty (placeholders).
nums2 of size n, fully filled with valid numbers.
You need to merge the two arrays in a sorted manner into nums1.

Use Three Pointers:

One pointer i starts at the last valid element of nums1 (i.e., m-1).
Another pointer j starts at the last element of nums2 (i.e., n-1).
The third pointer k is at the very end of nums1 (i.e., m+n-1), which is the index where the largest element will be placed.

Iterate and Compare:

Compare elements from nums1 and nums2 starting from the end. The reason to start from the end is that you want to fill 
the array from the back to the front (this avoids overwriting elements in nums1).
Place the larger element at index k in nums1 and move the corresponding pointer (i or j) and k backward.

Handle Remaining Elements:

After the main loop, if there are any elements left in nums1, they are already in place (since the array is sorted).
If there are any elements left in nums2, copy them to nums1 because they are smaller than the remaining elements of nums1.

Edge Cases:

If nums2 is empty (n = 0), no merging is needed, and nums1 remains as is.
If nums1 has no valid elements (m = 0), simply copy nums2 into nums1.

Time Complexity:
Since each element from both arrays is processed exactly once, the time complexity is O(m + n).

Space Complexity:
The solution uses a constant amount of extra space, so the space complexity is O(1).
