--------------------------------------------------------------------------------------------
Question Link -> https://leetcode.com/problems/find-the-duplicate-number/
--------------------------------------------------------------------------------------------
287. Find the Duplicate Number =>
      Given an array of integers nums containing n + 1 integers where each integer is in 
      the range [1, n] inclusive.

      There is only one repeated number in nums, return this repeated number.
      
      You must solve the problem without modifying the array nums and using
      only constant extra space.
--------------------------------------------------------------------------------------------
Example 1:

Input: nums = [1,3,4,2,2]
Output: 2
-------------------
Example 2:

Input: nums = [3,1,3,4,2]
Output: 3
-------------------
Example 3:

Input: nums = [3,3,3,3,3]
Output: 3
--------------------------------------------------------------------------------------------
class Solution {
public:
     int findDuplicate(vector<int>& nums) {
        // Using Floyed Algorithm
        int slow = nums[0];
        int fast = nums[0];
        
        do{
            slow = nums[slow];
            fast = nums[nums[fast]];
        }while(slow != fast);
        
        fast = nums[0];
        while(slow != fast)
        {
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow;
    }
};
// Time Complexity: 
// ùëÇ(n)
// Space Complexity: 
// ùëÇ(1)
--------------------------------------------------------------------------------------------
Approach for Solving the Problem:

1.Use Two Pointers (Floyd's Cycle Detection):

Initialize two pointers: slow and fast, both starting at nums[0].
slow moves one step at a time (slow = nums[slow]).
fast moves two steps at a time (fast = nums[nums[fast]]).

2.Detect Cycle:

Move both pointers until slow and fast meet. This meeting point confirms that a cycle (caused by the duplicate) exists.

3.Find the Duplicate (Cycle Start):

Reset one pointer (fast) to the start (nums[0]).
Move both slow and fast one step at a time until they meet again. The point where they meet is the duplicate number.

4.Return the Duplicate Number.
