--------------------------------------------------------------------------------------------
Question Link -> https://www.naukri.com/code360/problems/count-inversions_615?leftPanelTabValue=PROBLEM
--------------------------------------------------------------------------------------------
287.  =>  Count Inversions
     For a given integer array/list 'ARR' of size 'N' containing all distinct values, find the total number of 'Inversions' that may exist.
     An inversion is defined for a pair of integers in the array/list when the following two conditions are met.

     A pair ('ARR[i]', 'ARR[j]') is said to be an inversion when:

      1. 'ARR[i] > 'ARR[j]' 
      2. 'i' < 'j'

Where 'i' and 'j' denote the indices ranging from [0, 'N').
--------------------------------------------------------------------------------------------
Example 1:

Input: nums = [3,2,1]
Output: 3
Explanation of Sample Output 1:
We have a total of 3 pairs which satisfy the condition of inversion. (3, 2), (2, 1) and (3, 1).
-------------------
Example 2:

Input: nums = [2,5,1,3,4]
Output: 4
Explanation of Sample Output 1:
We have a total of 4 pairs which satisfy the condition of inversion. (2, 1), (5, 1), (5, 3) and (5, 4).
--------------------------------------------------------------------------------------------
#include <bits/stdc++.h>

long long mergeAndCount(long long *arr, int left, int mid, int right) {
    long long count = 0;
    int n1 = mid - left + 1;
    int n2 = right - mid;

    // Create temporary arrays
    vector<long long> leftArr(n1);
    vector<long long> rightArr(n2);

    for (int i = 0; i < n1; i++) {
        leftArr[i] = arr[left + i];
    }
    for (int i = 0; i < n2; i++) {
        rightArr[i] = arr[mid + 1 + i];
    }

    // Merge the two halves and count inversions
    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (leftArr[i] <= rightArr[j]) {
            arr[k++] = leftArr[i++];
        } else {
            arr[k++] = rightArr[j++];
            count += (n1 - i); // Count inversions
        }
    }

    // Copy the remaining elements
    while (i < n1) {
        arr[k++] = leftArr[i++];
    }
    while (j < n2) {
        arr[k++] = rightArr[j++];
    }

    return count;
}

long long mergeSortAndCount(long long *arr, int left, int right) {
    if (left >= right) {
        return 0; // Base case: No inversions if the array has one or no elements
    }

    int mid = left + (right - left) / 2;
    long long count = 0;

    // Recursively count inversions in the left half
    count += mergeSortAndCount(arr, left, mid);

    // Recursively count inversions in the right half
    count += mergeSortAndCount(arr, mid + 1, right);

    // Count inversions while merging both halves
    count += mergeAndCount(arr, left, mid, right);

    return count;
}

long long getInversions(long long *arr, int n) {
    // Call the recursive merge sort and count function
    return mergeSortAndCount(arr, 0, n - 1);
}
--------------------------------------------------------------------------------------------
Step 1: Divide the Array:
Use the merge sort algorithm to divide the array into two halves recursively until each half contains one element.

Step 2: Count Inversions in Each Half:
Recursively count inversions in the left half and the right half of the array.

Step 3: Count Cross-Inversions During Merge:
During the merge step, when combining two sorted halves, count how many elements from the left half are greater than 
elements from the right half. These contribute to "cross-inversions."

Step 4: Merge the Two Halves:
Merge the two halves into a single sorted array while keeping track of the inversion count.

Detailed Plan:
Recursive Split:
Recursively split the array into two halves until you have arrays of size 1.

Merge and Count:

While merging two sorted halves, count the number of inversions.
If leftArr[i] > rightArr[j], then all elements after i in the left array will also be greater than rightArr[j], so you add mid - i + 1 to the inversion count.
Return the Total Count:

The total inversion count is the sum of inversions from the left half, the right half, and the cross-inversions.
