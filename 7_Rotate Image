--------------------------------------------------------------------------------------------
48. Rotate Image - >
        You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

        You have to rotate the image in-place, which means you have to modify the input 2D
        matrix directly. DO NOT allocate another 2D matrix and do the rotation.
--------------------------------------------------------------------------------------------
Example 1:

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]
-----------
Example 2:

Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]
--------------------------------------------------------------------------------------------
class Solution {
public:
    void rotate(vector<vector<int>>& matrix){
        int n = matrix.size();
        for(int i= 0; i < n-1; i++)
        {
            for(int j = i+1; j < n; j++)
            {
                swap(matrix[i][j] , matrix[j][i]);
            }
        }
        for(int i = 0; i < n; i++)
        {
            reverse(matrix[i].begin(), matrix[i].end());
        }
    }
};

// TIME COMPLEXITY = O(N*N);
// SPACE COMPLEXITY = O(1);
--------------------------------------------------------------------------------------------
Approach: 
1.Understand the Matrix Layout:

Given a square matrix (n x n), each element can be represented by its coordinates (i, j).
After a 90-degree clockwise rotation, the element that was at position (i, j) will move to (j, n-1-i).

2.Transpose the Matrix:

Swap elements across the main diagonal to transpose the matrix. This means changing (i, j) to (j, i).
This can be done with a nested loop, iterating only through the upper triangle of the matrix (excluding the diagonal).

3. Reverse Each Row:

After transposing, reverse each row of the matrix. This step shifts elements to their new positions for the final rotated matrix.
