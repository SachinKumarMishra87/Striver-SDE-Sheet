
--------------------------------------------------------------------------------------------
53. Maximum Subarray - >
             Given an integer array nums, find the subarray with the largest sum, and return its sum.
--------------------------------------------------------------------------------------------
Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.
-----------
Example 2:

Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.
-----------
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.
--------------------------------------------------------------------------------------------
class Solution {
public:
   
      int maxSubArray(vector<int>& nums) {
      int max_Sum = nums[0];  // Initialize max_Sum with the first element
      int sum = 0;  // Initialize sum to track the current subarray sum
      
      for (int i = 0; i < nums.size(); i++) {
          sum += nums[i];  // Add current element to sum
          
          if (sum > max_Sum) {
              max_Sum = sum;  // Update max_Sum if current sum is greater
          }
          
          if (sum < 0) {
              sum = 0;  // Reset sum to 0 if it's negative
          }
      }
      return max_Sum;  // Return the largest subarray sum
  }


};
--------------------------------------------------------------------------------------------
Approach: Kadaneâ€™s Algorithm -> 
The goal is to find the largest sum of a contiguous subarray in a given array of integers. This algorithm helps us solve the problem efficiently in linear time (O(n)).

Steps:
Initialize Variables:

max_Sum: This stores the maximum sum we've found so far. Initially, it is set to the first element of the array because, at the very least, the maximum sum will be at least one of the elements.
sum: This keeps track of the sum of the current subarray. Initially, it is set to 0.
Iterate Over the Array:

For each element in the array:
Add the current element to the sum. This is like building up the subarray, one element at a time.
Update the maximum sum: If the current sum is greater than max_Sum, update max_Sum to store the larger sum.
Reset the sum if it becomes negative: If the current sum is less than 0, it means this subarray is dragging the total sum down. In such cases, reset sum to 0 to start fresh from the next element.
Return the Maximum Sum:

After the loop finishes, max_Sum will contain the largest sum of any subarray in the array.
