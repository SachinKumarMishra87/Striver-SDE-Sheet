--------------------------------------------------------------------------------------------
121. Best Time to Buy and Sell Stock- >
      You are given an array prices where prices[i] is the price of a given stock on the ith day.
      You want to maximize your profit by choosing a single day to buy one stock 
      and choosing a different day in the future to sell that stock.
      Return the maximum profit you can achieve from this transaction. If you cannot 
      achieve any profit, return 0.
--------------------------------------------------------------------------------------------
Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
-----------
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.

--------------------------------------------------------------------------------------------
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int profit = 0;
        int mini = prices[0];
        
        for(int i = 1; i < prices.size(); i++)
        {
             int diff = prices[i] - mini;
             profit = max(diff, profit);
             mini = min(mini, prices[i]);   
        }
        return profit;
    }
};
--------------------------------------------------------------------------------------------
Approach: 
Initialize Variables:
      You start with a variable profit set to 0 to track the maximum profit, and mini set to 
      the first price in the array to represent the minimum price encountered so far.

Iterate Through Prices:
      You loop through the prices starting from the second day (index 1).

Calculate Profit Difference: 
      For each price, you calculate the difference between the current price and mini (the lowest
      price seen so far).

Update Profit: 
      You compare this difference with the current maximum profit and update profit if the 
      difference is larger.

Update Minimum Price: 
      You update mini to be the smaller of its current value or the current price, ensuring
      that mini always holds the lowest price encountered so far.

Return Result: 
      Finally, you return the profit.
