--------------------------------------------------------------------------------------------
Question Link -> https://leetcode.com/problems/unique-paths/
--------------------------------------------------------------------------------------------
62. Unique Paths => 
    There is a robot on an m x n grid. The robot is initially located at the top-left corner 
    (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]).
    The robot can only move either down or right at any point in time.

    Given the two integers m and n, return the number of possible unique paths that the robot
    can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109
--------------------------------------------------------------------------------------------
Input: m = 3, n = 2
Output: 3
Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down
--------------------------------------------------------------------------------------------
class Solution {
public:
   int countPaths(int i, int j, int m, int n, vector<vector<int>> &dp) {
    // If we have reached the bottom-right corner, return 1 (one valid path).
    if (i == n - 1 && j == m - 1) {
        return 1;
    }

    // If we go out of the grid's boundaries, return 0 (no valid path).
    if (i >= n || j >= m) {
        return 0;
    }

    // If this subproblem is already solved, return the stored result from dp.
    if (dp[i][j] != -1) {
        return dp[i][j];
    }

    // Otherwise, calculate the number of paths by moving down and right.
    dp[i][j] = countPaths(i + 1, j, m, n, dp) + countPaths(i, j + 1, m, n, dp);
    return dp[i][j];
}

int uniquePaths(int m, int n) {
    // Initialize a DP table with -1, indicating that no subproblems are solved yet.
    vector<vector<int>> dp(n, vector<int>(m, -1));

    // Start the recursion from the top-left corner (0, 0).
    return countPaths(0, 0, m, n, dp);
}

};
--------------------------------------------------------------------------------------------
1. Recursive Idea:
The function countPaths(i, j, m, n, dp) calculates the number of unique paths from the current 
position (i, j) to the bottom-right corner (n-1, m-1). The logic is:

If you are already at the bottom-right corner (n-1, m-1), return 1 since this is one valid path.
If you move out of the grid boundaries (i.e., i >= n or j >= m), return 0 as it is not a valid path.
Otherwise, from position (i, j), you have two options:
Move right to position (i, j+1).
Move down to position (i+1, j).
The total number of unique paths from position (i, j) is the sum of the paths from the two possible
moves (right and down).

2. Memoization:
To optimize the recursive calls and avoid recalculating results for the same positions, a 2D table dp 
is used to store intermediate results. If a result for a position (i, j) has already been computed
(i.e., dp[i][j] is not -1), we return the stored value to save computation time.

3. Base Cases:
If you reach the bottom-right corner (n-1, m-1): You have found a valid path, so return 1.
If you go out of bounds (i.e., when i >= n or j >= m): There is no valid path, so return 0.
4. Recursive Formula:
The number of unique paths from position (i, j) is:
cpp
Copy code
dp[i][j] = countPaths(i + 1, j, m, n, dp) + countPaths(i, j + 1, m, n, dp);
5. Initialization:
A 2D dp table of size n x m is initialized with -1 values to indicate that no subproblem has been solved yet.
6. Final Answer:
The function uniquePaths(m, n) initializes the DP table and starts the recursive calculation from
the top-left corner (0, 0) by calling countPaths(0, 0, m, n, dp).
