--------------------------------------------------------------------------------------------
Question Link -> https://leetcode.com/problems/reverse-pairs/
--------------------------------------------------------------------------------------------
493. Reverse Pairs => 
    Given an integer array nums, return the number of reverse pairs in the array.
    A reverse pair is a pair (i, j) where:

    0 <= i < j < nums.length and
    nums[i] > 2 * nums[j].
--------------------------------------------------------------------------------------------
Example - 1

Input: nums = [2,4,3,5,1]
Output: 3
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 4, nums[4] = 1, 4 > 2 * 1
(2, 4) --> nums[2] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 5, nums[4] = 1, 5 > 2 * 1
--------------------------------------------------------------------------------------------
class Solution {
public:
    void merge(vector<int> &arr, int low, int mid, int high) {
        vector<int> temp;
        int left = low;
        int right = mid + 1;

        // Merge the two sorted halves
        while (left <= mid && right <= high) {
            if (arr[left] <= arr[right]) {
                temp.push_back(arr[left]);
                left++;
            } else {
                temp.push_back(arr[right]);
                right++;
            }
        }
        while (left <= mid) {
            temp.push_back(arr[left]);
            left++;
        }
        while (right <= high) {
            temp.push_back(arr[right]);
            right++;
        }

        // Copy the sorted elements back into the original array
        for (int i = low; i <= high; i++) {
            arr[i] = temp[i - low];
        }
    }

    int countPairs(vector<int> &arr, int low, int mid, int high) {
        int right = mid + 1;
        int cnt = 0;
        for (int i = low; i <= mid; i++) {
            while (right <= high && arr[i] > 2LL * arr[right]) {  // Avoid overflow with 2LL
                right++;
            }
            cnt += (right - (mid + 1));  // Count valid pairs
        }
        return cnt;
    }

    int mergeSort(vector<int> &arr, int low, int high) {
        if (low >= high) {
            return 0;
        }
        int mid = (low + high) / 2;
        // Sort and count pairs in left and right halves
        int invCount = mergeSort(arr, low, mid) + mergeSort(arr, mid + 1, high);
        
        // Count the reverse pairs between the two halves
        invCount += countPairs(arr, low, mid, high);
        
        // Merge the two sorted halves
        merge(arr, low, mid, high);
        
        return invCount;  // Return the total count of reverse pairs
    }

    int reversePairs(vector<int>& nums) {
        int n = nums.size();
        return mergeSort(nums, 0, n - 1);
    }
};

--------------------------------------------------------------------------------------------

1: Approach for Solving the reversePairs Problem:
The problem is to find the number of reverse pairs in an array, where a reverse pair is defined as 
2: a pair of indices (i, j) such that:

i < j
nums[i] > 2 * nums[j]
We solve this problem using a modified Merge Sort algorithm. The idea behind using merge sort is that
while dividing the array into smaller subarrays and sorting them, we can count the reverse pairs 
efficiently within the two halves of the array.

Step-by-Step Approach:
3: Recursive Divide and Conquer (Merge Sort):

The merge sort algorithm is used to divide the array into smaller subarrays, sort them, and then merge 
them back together.
During the merging step, we will also count the number of reverse pairs between the two halves of the array.
4: Counting Reverse Pairs:

Once the array is divided into two sorted halves, the left half spans from index low to mid, and the right half spans from mid+1 to high.
We want to count how many elements in the left half satisfy the reverse pair condition (nums[i] > 2 * nums[j]) 
with elements in the right half.
To do this, for each element i in the left half, we find the first element j in the right half such that nums[i] <= 2 * nums[j]. 
The number of elements that form reverse pairs with nums[i] is simply the number of elements in the right half that appear before index j.
5: Merging the Two Sorted Halves:

After counting reverse pairs between the two halves, we proceed to merge the two sorted halves back together into a sorted array.
This merging step ensures that the array remains sorted as we recursively combine smaller subarrays back into larger ones.
6: Recursive Merge Sort Function:

The recursive function mergeSort first divides the array into two halves, sorts both halves recursively, and counts reverse pairs during the merging step.
The final result is the total number of reverse pairs across the entire array.
