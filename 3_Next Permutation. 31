
--------------------------------------------------------------------------------------------
31. Next Permutation - >
             A permutation of an array of integers is an arrangement of its members into a sequence or linear order.

            For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2],
            [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].
            The next permutation of an array of integers is the next lexicographically greater
            permutation of its integer. More formally, if all the permutations of the array are
            sorted in one container according to their lexicographical order, then the next 
            permutation of that array is the permutation that follows it in the sorted container.
            If such arrangement is not possible, the array must be rearranged as the lowest
            possible order (i.e., sorted in ascending order).
            
            For example, the next permutation of arr = [1,2,3] is [1,3,2].
            Similarly, the next permutation of arr = [2,3,1] is [3,1,2].
            While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does
            not have a lexicographical larger rearrangement.
            Given an array of integers nums, find the next permutation of nums.
            
            The replacement must be in place and use only constant extra memory.
--------------------------------------------------------------------------------------------
Example 1:

Input: nums = [1,2,3]
Output: [1,3,2]

Example 2:

Input: nums = [3,2,1]
Output: [1,2,3]
--------------------------------------------------------------------------------------------
Example 2:

Input: nums = [3,2,1]
Output: [1,2,3]
--------------------------------------------------------------------------------------------
class Solution {
public:
   void nextPermutation(vector<int>& nums) {
    int idx = -1;  // Step 1: Start by initializing an index to -1
    int n = nums.size();
    
    // Step 1: Find the first decreasing element from the right
    for (int i = n-1; i > 0; i--) {
        if (nums[i] > nums[i-1]) {
            idx = i;  // Set idx to the first element that breaks descending order
            break;
        }
    }
    
    // If no such element is found, reverse the entire array (this is the last permutation)
    if (idx == -1) {
        reverse(nums.begin(), nums.end());
    } else {
        int prev = idx;
        
        // Step 2: Find the smallest number that is larger than nums[idx-1]
        for (int i = idx + 1; i < n; i++) {
            if (nums[i] > nums[idx-1] && nums[i] <= nums[prev]) {
                prev = i;
            }
        }
        
        // Step 3: Swap nums[idx-1] with nums[prev]
        swap(nums[idx-1], nums[prev]);
        
        // Step 4: Reverse the part of the array after idx
        reverse(nums.begin() + idx, nums.end());
    }
  }

};
--------------------------------------------------------------------------------------------
Approach to Finding the Next Permutation -
The goal of this problem is to rearrange a sequence of numbers into its next lexicographical permutation
(next greater arrangement). If such a permutation is not possible (i.e., the sequence is the largest), 
we rearrange it into the smallest permutation (sorted in ascending order).

Steps:
Find the first pair where the sequence can be increased:

Start from the end of the array and move left. Find the first pair of numbers where nums[i] > nums[i-1]. 
This means there is a possibility to form a larger permutation.
If no such pair exists (the array is in descending order), this means it is already the last permutation. 
In this case, we just reverse the entire array to get the smallest permutation.
Find the next larger number to swap with:

If you find such a pair at index i, look for the smallest number in the right part of the array that is
still larger than nums[i-1]. This is the number that should be swapped with nums[i-1] to form the next permutation.
Swap the numbers:

Swap the number at nums[i-1] with the number you found that is just larger than it.
Reverse the rest of the sequence:

Finally, to ensure the smallest possible next permutation, reverse all the numbers to the right of the
original position i. This makes the numbers after the swap in ascending order, guaranteeing the smallest next permutation.
