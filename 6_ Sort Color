--------------------------------------------------------------------------------------------
75. Sort Colors - >
        Given an array nums with n objects colored red, white, or blue, sort them in-place so
        that objects of the same color are adjacent, with the colors in the order red,
        white, and blue.
        
        We will use the integers 0, 1, and 2 to represent the color red, white, 
        and blue, respectively.
        You must solve this problem without using the library's sort function.
--------------------------------------------------------------------------------------------
Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
-----------
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2
--------------------------------------------------------------------------------------------
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int low = 0;
        int mid = 0;
        int high = nums.size()-1;
        
        while(mid <= high)
        {
            if(nums[mid] == 0)
            {
                swap(nums[mid], nums[low]);
                low++;
                mid++;
            }
            else if(nums[mid] == 1)
            {
                mid++;
            }
            else{
                swap(nums[mid], nums[high]);
                    high--;
            }
        }
    }
};
--------------------------------------------------------------------------------------------
Approach: 
1.Initialize Pointers:

low: 
  This pointer keeps track of where the next 0 should be placed. It starts at the beginning of the array.
mid:
  This pointer scans through the array. It also starts at the beginning.
high:
  This pointer keeps track of where the next 2 should be placed. It starts at the end of the array.
  Iterate Through the Array:

2. Use a while loop to iterate as long as mid is less than or equal to high.
Three Cases:

Case 1: Current Element is 0:
If nums[mid] is 0, swap it with nums[low].
Increment both low and mid because you have placed a 0 in its correct position.
Case 2: Current Element is 1:
If nums[mid] is 1, it is already in the right place. Just move mid one step forward.
Case 3: Current Element is 2:
If nums[mid] is 2, swap it with nums[high].
Decrement high to move the boundary of the 2s leftwards. You do not increment mid here because you need to check the element that was swapped from high.
End of Loop:

The loop continues until mid surpasses high. At this point, all 0s will be at the beginning of the array, all 1s will be in the middle, and all 2s will be at the end.
